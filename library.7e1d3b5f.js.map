{"mappings":"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","sources":["src/js/loader.js","src/js/header.js","src/js/library.js","src/js/API.js","src/js/renderMainGallery.js","src/js/renderPage.js","src/js/gallery-lib.js","src/js/modalRender.js"],"sourcesContent":["// REF FOR LOADER BACKDROP\nexport const maskEl = document.querySelector('.mask');\n\nwindow.addEventListener('DOMContentLoaded', onWindowLoad);\n\n// FUNCTION FOR LOADER WHEN APP STARTING\n\nexport function onWindowLoad() {\n  setTimeout(() => {\n    maskEl.classList.add('hide');\n  }, 600);\n}\n\n// LOADER SHOW FUNCTION\n\nexport function loaderShow() {\n  maskEl.classList.remove('hide');\n}\n\n// LOADER HIDE FUNCTION\n\nexport function loaderHide() {\n  setTimeout(() => {\n    maskEl.classList.add('hide');\n  }, 600);\n}\n","const refs = {\n    formEl: document.querySelector('.form'),\n    inputEl: document.querySelector('.input__form'),\n    buttonEl: document.querySelector('.submit'),\n    error: document.querySelector('.error__message')\n}\n\ntry {\n    refs.formEl.addEventListener('submit', getValue);\n} catch (eror) {\n    console.log(eror);\n}\n\n// refs.formEl.addEventListener('submit', getValue);\n\nfunction getValue (e){\n    e.preventDefault();\n    const formValue = e.currentTarget.elements[0].value\n    refs.error.style.display = 'none';\nif (formValue == ''){\n    refs.error.style.display = 'block';\n}\n    e.currentTarget.reset();\n}","const refs = {\n    watched: document.querySelector('.watched'),\n    queue: document.querySelector('.queue')\n}\n\ntry {\n    refs.watched.addEventListener('click', () => {\n      refs.watched.classList.add('active');\n      refs.queue.classList.remove('active');\n    });\n  } catch (eror) {\n    console.log(eror);\n  }\n  \n  try {\n    refs.queue.addEventListener('click', () => {\n      refs.queue.classList.add('active');\n      refs.watched.classList.remove('active');\n    });\n  } catch (eror) {\n    console.log(eror);\n  }\n\n\n// refs.watched.addEventListener('click', ()=>{\n//     refs.watched.classList.add('active');\n//     refs.queue.classList.remove('active');\n// });\n\n// refs.queue.addEventListener('click', ()=>{\n//     refs.queue.classList.add('active');\n//     refs.watched.classList.remove('active');\n// });","const API_KEY = '1c5c067e324c39f9223ad13ef9891a0a';\n\nasync function fetchTrending(page) {\n  try {\n    const URL = 'https://api.themoviedb.org/3/trending/movie/week';\n\n    const response = await fetch(`${URL}?api_key=${API_KEY}&page=${page}`);\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nasync function fetchSearchFilm(query, page) {\n  try {\n    const URL = 'https://api.themoviedb.org/3/search/movie';\n\n    const response = await fetch(\n      `${URL}?api_key=${API_KEY}&page=${page}&query=${query}`\n    );\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nasync function fetchGenres() {\n  try {\n    const URL = 'https://api.themoviedb.org/3/genre/movie/list';\n\n    const response = await fetch(`${URL}?api_key=${API_KEY}`);\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nasync function fetchIMDbId(filmoId) {\n  try {\n    console.log(filmoId);\n    const URL = 'https://api.themoviedb.org/3/movie/';\n\n    const response = await fetch(`${URL}${filmoId}?api_key=${API_KEY}`);\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nexport { fetchTrending, fetchSearchFilm, fetchGenres, fetchIMDbId };\n\n// Комментарии по поиску\n//        Галерея:\n// Название фильма: title\n// Жанры: genre_ids  реализованы через localStorage\n// Год выхода фильма: release_date   нужно slice обрезать и оставить первые 4 знака (тип строка)\n// Оценка пользователей : vote_average  нужно округлить до 1 знака после запятой\n\n// Модальное окно:\n// дополнительно к Галерее:\n// Количество отзывов vote_count\n// Популярность popularity\n// Оригинальное название original_title\n// Описание overview\n","function clearGallery() {\n  gallery.innerHTML = '';\n}\n\nconst galleryLib = document.querySelector('.gallery');\n\nconst getCurrentArrayFilmLS = localStorage.getItem('currentArrayFilm');\nconst currentArrayFilms = JSON.parse(getCurrentArrayFilmLS);\n\nfunction renderGalleryLib(movie) {\n  const markupGalleryLib = movie\n    .map(mov => {\n      const { title, genresName, release_date, id, poster_path } = mov;\n      return `<li class=\"gallery__item\">\n            <a class=\"gallery__card\" href=\"#\" id=\"${id}\">\n               <picture>\n                  <source media=\"(min-width: 1280px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w500${poster_path}    1x,\n                              https://image.tmdb.org/t/p/original${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <source media=\"(min-width: 768px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w342${poster_path}    1x,\n                              https://image.tmdb.org/t/p/w780${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <source media=\"(max-width: 767px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w342${poster_path}    1x,\n                              https://image.tmdb.org/t/p/w780${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <img class=\"gallery__foto\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" width=\"450\"\n                     height=\"294\" alt=\"${title} poster\" loading=\"lazy\" />\n               </picture>\n               <h2 class=\"gallery__subtitle\">${title}</h2>\n               <div class=\"gallery__info\">\n                  <p class=\"gallery__genres\">${genresName}</p>\n                  <p class=\"gallery__year\">${release_date.slice(0, 4)}</p>\n               </div>\n            </a>\n         </li>`;\n    })\n    .join('');\n  galleryLib.insertAdjacentHTML('beforeend', markupGalleryLib);\n}\n// console.log(currentArrayFilms);\n// renderGalleryLib(currentArrayFilms);\n\nexport default renderGalleryLib;\n","import {\n  fetchSearchFilm,\n  fetchTrending,\n  fetchGenres,\n  fetchIMDbId,\n} from './API.js';\n\nimport renderGalleryLib from './renderMainGallery';\n\nconst gallery = document.querySelector('.gallery');\nconst form = document.querySelector('.form');\n\nform.addEventListener('input', inputFilterFilm);\nform.addEventListener('submit', onSubmitFilterFilm);\n\nlet page = 1;\nlet searchNameFilm = '';\n\nlet currentArrFilmLS = [];\nlet currentFilmReadLS = [];\n\n// Получение с бэкэнда массива жанров фильмов и сохраниние его в LocalStorage для дальнейшей работы\n\nfetchGenres().then(responce => {\n  localStorage.setItem('Genres', JSON.stringify(responce.genres));\n});\n\n// Чтение перед загрузкой стартовой страницы сохраненного массива жанров фильмов\n\nconst gen = localStorage.getItem('Genres');\nconst getCurrentArrayFilmLS = localStorage.getItem('currentArrayFilm');\nconst currentArrayFilms = JSON.parse(getCurrentArrayFilmLS);\n\nfunction inputFilterFilm(event) {\n  searchNameFilm = event.target.value;\n}\n\nfunction onSubmitFilterFilm(event) {\n  event.preventDefault();\n  clearGallery();\n  fetchSearchFilm(searchNameFilm, page).then(responce => {\n    renderFilmoteka(responce);\n  });\n}\n\nfetchTrending(page)\n  .then(responce => {\n    renderFilmoteka(responce);\n  })\n  .catch(error => {\n    console.log(error);\n  });\n\nfunction renderFilmoteka(films) {\n  const arrayFilms = films.results;\n  const totalFilms = films.total_results;\n  const totalPage = films.total_pages;\n  let updateCurrentArrFilmsLS = getCurrentArrFilmsLS(arrayFilms);\n  renderGalleryLib(updateCurrentArrFilmsLS);\n}\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\nfunction getCurrentArrFilmsLS(arrayFilms) {\n  currentArrFilmLS = [];\n  const markup = arrayFilms.map(card => {\n    // Формирование массива текущей страницы для записи в LocalStorage для последующего использования в модальном окне\n    currentArrFilmLS.push(card);\n  });\n  // console.log('currentArrFilmLS', currentArrFilmLS);\n  let arrayFilmsWithGenderName = remareFilsmObj(currentArrFilmLS);\n  localStorage.setItem(\n    'currentArrayFilm',\n    JSON.stringify(arrayFilmsWithGenderName)\n  );\n  console.log('LS', arrayFilmsWithGenderName);\n  return arrayFilmsWithGenderName;\n}\n\nfunction remareFilsmObj(films) {\n  return films.map(el => remareFilmObj(el));\n}\n\nfunction remareFilmObj(film) {\n  // // console.log('film', film);\n  film.genresName = getGenres(film.genre_ids);\n  // console.log('film.genresName', film.genresName);\n  return film;\n}\n\nfunction getGenres(genre_ids) {\n  let genres = '';\n  const genresLocalStorage = localStorage.getItem('Genres');\n  const gen = JSON.parse(genresLocalStorage);\n\n  if (genre_ids.length !== 0) {\n    if (genre_ids.length > 3) {\n      genre_ids = genre_ids.slice(0, 3);\n    }\n\n    Object.values(gen).forEach(value => {\n      if (genre_ids.includes(value.id)) {\n        genres = genres.concat(value.name, ', ');\n      }\n    });\n  }\n  genres = genres.slice(0, genres.length - 2);\n  return genres;\n}\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\nfunction clearGallery() {\n  gallery.innerHTML = '';\n}\n\n// Чтение из LocalStorage массива текущей страницы галереи\n// function onReadCurrentArrayFilmLS() {\n//   let filmReadLocalStorage = localStorage.getItem('currentArrayFilm');\n//   currentFilmReadLS = JSON.parse(filmReadLocalStorage);\n\n//   // // console.log(currentFilmReadLS);\n// }\n\n// onReadCurrentArrayFilmLS();\n// // console.log(currentFilmReadLS);\n\n// Получение ID  фильма с объекта в LS\n// function onReadIdFromLS(numberFilmPage) {\n//   return currentFilmReadLS[numberFilmPage].id;\n// }\n\n// Получение IMDb_id с бэкэнда через ID фильма с картотеки с сохранением IMDb_id в LS\n\n// // console.log(localStorage.getItem());\n\n// Чтение IMDb_id с LS для получения ссылки на сайт IMDb\n// let idIMDb = JSON.parse(localStorage.getItem('IMDb_id'));\n// // console.log(idIMDb);\n\n// Пример открытия ссылки в новой вкладке\n// // console.log(window.open(`https://www.imdb.com/title/${idIMDb}`, '_blank'));\n\n// function makeGallery(arrayCards) {\n//   const API_IMAGE = 'https://image.tmdb.org/t/p';\n//   currentArrFilmLS = [];\n//   const markup = arrayCards\n//     .map(card => {\n//       // Формирование массива текущей страницы для записи в LocalStorage для последующего использования в модальном окне\n//       currentArrFilmLS.push(card);\n//       //\n//       let genres = '';\n//       const genresLocalStorage = localStorage.getItem('Genres');\n//       const gen = JSON.parse(genresLocalStorage);\n//       if (card.genre_ids.length !== 0) {\n//         Object.values(gen).forEach(value => {\n//           if (card.genre_ids.includes(value.id)) {\n//             genres = genres.concat(value.name, ', ');\n//           }\n//         });\n//       }\n//       genres = genres.slice(0, genres.length - 2);\n//       return `<div class=\"card\" id=\"${card.id}\">\n//       <img class=\"gallery__image\" src=\"${API_IMAGE}/w300${card.poster_path}\" alt=\"Постер не найден\" loading=\"lazy\" />\n//     <p class=\"genres\">${genres}</p>\n//   </div>`;\n//     })\n//     .join('');\n//   gallery.insertAdjacentHTML('beforeend', markup);\n\n//   // Удаление из LocalStorage массива жанров фильмов\n//   // localStorage.removeItem('Genres');\n//   // Сохранение в LocalStorage массива фильмов текущей страницы\n// }\n\n// Очистка галереи\n","const galleryLib = document.querySelector('.gallery-lib');\nconst divContaunerText = document.querySelector('.div__text--decoration');\n\n\nfunction renderGalleryLib(movie) {\n  const markupGalleryLib = movie\n    .map(mov => {\n      const { title, genre_ids, release_date, vote_average, id, poster_path } =\n        mov;\n      return `<li class=\"gallery__item\">\n            <a class=\"gallery__card\" href=\"#\" id=\"${id}\">\n               <picture>\n                  <source media=\"(min-width: 1280px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w500${poster_path}    1x,\n                              https://image.tmdb.org/t/p/original${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <source media=\"(min-width: 768px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w342${poster_path}    1x,\n                              https://image.tmdb.org/t/p/w780${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <source media=\"(max-width: 767px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w342${poster_path}    1x,\n                              https://image.tmdb.org/t/p/w780${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <img class=\"gallery__foto\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" width=\"450\"\n                     height=\"294\" alt=\"${title} poster\" loading=\"lazy\" />\n               </picture>\n               <h2 class=\"gallery__subtitle\">${title}</h2>\n               <div class=\"gallery__info\">\n                  <p class=\"gallery__genres\">${genre_ids}</p>\n                  <p class=\"gallery__year\">${release_date}</p>\n                  <p class=\"gallery__vote-average\">${vote_average}</p>\n               </div>\n            </a>\n         </li>`;\n    })\n    .join('');\n  galleryLib.insertAdjacentElement('beforebegin', markupGalleryLib);\n}\n","// const listEl = document.querySelector('.gallery');\n// listEl.addEventListener('click', e => {\n//   let filmId = e.target.closest('.gallery__card').id;\n// });\n\nimport fetchIMDbId from './API';\n\nconst listEl = document.querySelector('.gallery');\nlistEl.addEventListener('click', onRenderModal);\n\ndocument.querySelector('.button-modal__close').addEventListener('click', e => {\n  document.querySelector('.backdrop').classList.add('display__none');\n  document.querySelector('.modal').lastChild.remove();\n  // console.log(document.querySelector('.modal').lastChild);\n  // очистить локал стор\n});\n\nfunction onRenderModal(e) {\n  if (e.target === e.currentTarget) {\n    // console.log('nahui');\n    return;\n  }\n\n  let filmId = e.target.closest('.gallery__card').id;\n  let electFilm = getFilmById(filmId);\n  let idGenresOfElectFilm = electFilm.genre_ids;\n  let nameGenresOfElectFilm = getGenres(idGenresOfElectFilm);\n  let remakeElectFilm = remareFilmObj(electFilm);\n  // console.log(remakeElectFilm);\n\n  // \\\\\\\\\\\\\\\n  // fetchIMDbId(onReadIdFromLS(filmId)).then(responce => {\n  //   localStorage.setItem('IMDb_id', JSON.stringify(responce.imdb_id));\n  // });\n  let idIMDb = JSON.parse(localStorage.getItem('IMDb_id'));\n  // // console.log(idIMDb);\n  // \\\\\\\\\\\\\\\n\n  renderModalWindoq(remakeElectFilm, idIMDb);\n  document.querySelector('.backdrop').classList.remove('display__none');\n\n  // // console.log(nameGenresOfElectFilm);\n  // renderModalWindoq(electFilm, nameGenresOfElectFilm);\n}\n\nfunction getGenres(genre_ids) {\n  let genres = '';\n  const genresLocalStorage = localStorage.getItem('Genres');\n  const gen = JSON.parse(genresLocalStorage);\n\n  if (genre_ids.length !== 0) {\n    if (genre_ids.length > 3) {\n      genre_ids = genre_ids.slice(0, 3);\n    }\n\n    Object.values(gen).forEach(value => {\n      if (genre_ids.includes(value.id)) {\n        genres = genres.concat(value.name, ', ');\n      }\n    });\n  }\n  return genres;\n}\n\nfunction onReadCurrentArrayFilmLS() {\n  let filmReadLocalStorage = localStorage.getItem('currentArrayFilm');\n  let currentFilmReadLS = JSON.parse(filmReadLocalStorage);\n  return currentFilmReadLS;\n}\n\nfunction getFilmById(id) {\n  let arrayOfFilms = onReadCurrentArrayFilmLS();\n  let electFilm = arrayOfFilms.find(el => el.id === Number(id));\n  return electFilm;\n}\n\nfunction renderModalWindoq(filmEl, idInIMDB) {\n  const {\n    id,\n    title,\n    original_title,\n    poster_path,\n    popularity,\n    vote_average,\n    vote_count,\n    overview,\n    genresName,\n  } = filmEl;\n  document.querySelector('.modal').lastChild.remove();\n  let modalRenderCod = `    \n        <div class=\"button-modal--flex\">\n            <img class=\"button-modal__img\" src=\"https://image.tmdb.org/t/p/original${poster_path}\" alt=\"${title} poster\">\n            <div class=\"modal__about--movie\">\n                <h2 class=\"modal__about--title\">${title}</h2>\n                <p class=\"modal__about--title--movie\">Vote / Votes <span class=\"modal__about--rating\">${vote_average}</span><span\n                        class=\"modal__about--title--movie-slech\">/</span> <span\n                        class=\"modal__about--text--bleck\">${vote_count}</span>\n                </p>\n                <a target=\"_blank\" class=\"imdb-btn\" href=\"https://www.imdb.com/title/${idInIMDB}\">IMDb</a>\n\n                <p class=\"modal__about--title--movie\">Popularity<span\n                        class=\"modal__about--text--popularity\">${popularity}</span>\n                <p class=\"modal__about--title--movie\">Original Title<span class=\"modal__about--text--original--title\">A\n                        ${original_title}</span>\n                <p class=\"modal__about--title--movie\">Genre<span class=\"modal__about--text--genre\">${genresName}</span>\n                </p>\n                </p>\n                <p class=\"about__movie--text\">About</p>\n                <p class=\"about__movie--text--content\">${overview}</p>\n                <ul class=\"list__btn--add\">\n                    <li><button class=\"add__watched\" data-id=\"${id}\" type=\"button\">add to Watched</button></li>\n                    <li><button class=\"aadd_queue\" data-id=\"${id}\" type=\"button\">add to queue</button></li>\n                </ul>\n\n            </div>\n        </div>\n    </div>`;\n\n  document\n    .querySelector('.modal')\n    .insertAdjacentHTML('beforeend', modalRenderCod);\n}\n\nfunction remareFilmObj(film) {\n  // console.log('film', film);\n  film.genresName = getGenres(film.genre_ids);\n  // console.log('film.genresName', film.genresName);\n  return film;\n}\n\n// remareFilsmObj(onReadCurrentArrayFilmLS());\n\nfunction remareFilsmObj(films) {\n  // console.log('films', films);\n  let remake = films.map(el => remareFilmObj(el));\n  // console.log('remake', remake);\n}\n"],"names":["$bdfcdc80b4c38739$export$1cd6975ec0fe7e3d","document","querySelector","window","addEventListener","setTimeout","classList","add","$8aad853c076397e7$var$refs","formEl","inputEl","buttonEl","error","e","preventDefault","formValue","currentTarget","elements","value","style","display","reset","eror","console","log","$1cafa503bc57b7a0$var$refs","watched","queue","remove","eror1","async","$9641fdd394b90517$export$2fb6161e4448238a","query","page","URL","fetch","json","$e52841a474c14c2e$var$galleryLib","$e52841a474c14c2e$var$getCurrentArrayFilmLS","localStorage","getItem","JSON","parse","$e52841a474c14c2e$export$2e2bcd8739ae039","movie","markupGalleryLib","map","mov","title","genresName","release_date","id","poster_path","slice","join","insertAdjacentHTML","$35780a5662e3ee94$var$gallery","$35780a5662e3ee94$var$form","event","$35780a5662e3ee94$var$searchNameFilm","target","innerHTML","then","responce","$35780a5662e3ee94$var$renderFilmoteka","$35780a5662e3ee94$var$currentArrFilmLS","setItem","stringify","genres","$35780a5662e3ee94$var$getCurrentArrayFilmLS","films","arrayFilms","results","total_results","total_pages","updateCurrentArrFilmsLS","card","push","arrayFilmsWithGenderName","el","$35780a5662e3ee94$var$remareFilmObj","film","genre_ids","genresLocalStorage","gen1","length","Object","values","forEach","includes","concat","name","$35780a5662e3ee94$var$getGenres","$35780a5662e3ee94$var$remareFilsmObj","$35780a5662e3ee94$var$getCurrentArrFilmsLS","catch","$21b135ebd1d29f71$var$getGenres","gen","$21b135ebd1d29f71$var$remareFilmObj","electFilm","closest","filmReadLocalStorage","$21b135ebd1d29f71$var$onReadCurrentArrayFilmLS","find","Number","remakeElectFilm","idIMDb","filmEl","idInIMDB","original_title","popularity","vote_average","vote_count","overview","lastChild","modalRenderCod","$21b135ebd1d29f71$var$renderModalWindoq"],"version":3,"file":"library.7e1d3b5f.js.map"}