{"mappings":"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","sources":["src/js/loader.js","src/js/header.js","src/js/library.js","src/js/API.js","src/js/renderPage.js","src/js/gallery-lib.js","src/js/modalRender.js"],"sourcesContent":["// REF FOR LOADER BACKDROP\nexport const maskEl = document.querySelector('.mask');\n\nwindow.addEventListener('DOMContentLoaded', onWindowLoad);\n\n// FUNCTION FOR LOADER WHEN APP STARTING\n\nexport function onWindowLoad() {\n  setTimeout(() => {\n    maskEl.classList.add('hide');\n  }, 600);\n}\n\n// LOADER SHOW FUNCTION\n\nexport function loaderShow() {\n  maskEl.classList.remove('hide');\n}\n\n// LOADER HIDE FUNCTION\n\nexport function loaderHide() {\n  setTimeout(() => {\n    maskEl.classList.add('hide');\n  }, 600);\n}\n","const refs = {\n    formEl: document.querySelector('.form'),\n    inputEl: document.querySelector('.input__form'),\n    buttonEl: document.querySelector('.submit'),\n    error: document.querySelector('.error__message')\n}\n\ntry {\n    refs.formEl.addEventListener('submit', getValue);\n} catch (eror) {\n    console.log(eror);\n}\n\n// refs.formEl.addEventListener('submit', getValue);\n\nfunction getValue (e){\n    e.preventDefault();\n    const formValue = e.currentTarget.elements[0].value\n    refs.error.style.display = 'none';\nif (formValue == ''){\n    refs.error.style.display = 'block';\n}\n    e.currentTarget.reset();\n}","const refs = {\n    watched: document.querySelector('.watched'),\n    queue: document.querySelector('.queue')\n}\n\ntry {\n    refs.watched.addEventListener('click', () => {\n      refs.watched.classList.add('active');\n      refs.queue.classList.remove('active');\n    });\n  } catch (eror) {\n    console.log(eror);\n  }\n  \n  try {\n    refs.queue.addEventListener('click', () => {\n      refs.queue.classList.add('active');\n      refs.watched.classList.remove('active');\n    });\n  } catch (eror) {\n    console.log(eror);\n  }\n\n\n// refs.watched.addEventListener('click', ()=>{\n//     refs.watched.classList.add('active');\n//     refs.queue.classList.remove('active');\n// });\n\n// refs.queue.addEventListener('click', ()=>{\n//     refs.queue.classList.add('active');\n//     refs.watched.classList.remove('active');\n// });","const API_KEY = '1c5c067e324c39f9223ad13ef9891a0a';\n\nasync function fetchTrending(page) {\n  try {\n    const URL = 'https://api.themoviedb.org/3/trending/movie/week';\n\n    const response = await fetch(`${URL}?api_key=${API_KEY}&page=${page}`);\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nasync function fetchSearchFilm(query, page) {\n  try {\n    const URL = 'https://api.themoviedb.org/3/search/movie';\n\n    const response = await fetch(\n      `${URL}?api_key=${API_KEY}&page=${page}&query=${query}`\n    );\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nasync function fetchGenres() {\n  try {\n    const URL = 'https://api.themoviedb.org/3/genre/movie/list';\n\n    const response = await fetch(`${URL}?api_key=${API_KEY}`);\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nasync function fetchIMDbId(filmoId) {\n  try {\n    console.log(filmoId);\n    const URL = 'https://api.themoviedb.org/3/movie/';\n\n    const response = await fetch(`${URL}${filmoId}?api_key=${API_KEY}`);\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nexport { fetchTrending, fetchSearchFilm, fetchGenres, fetchIMDbId };\n\n// Комментарии по поиску\n//        Галерея:\n// Название фильма: title\n// Жанры: genre_ids  реализованы через localStorage\n// Год выхода фильма: release_date   нужно slice обрезать и оставить первые 4 знака (тип строка)\n// Оценка пользователей : vote_average  нужно округлить до 1 знака после запятой\n\n// Модальное окно:\n// дополнительно к Галерее:\n// Количество отзывов vote_count\n// Популярность popularity\n// Оригинальное название original_title\n// Описание overview\n","import {\n  fetchSearchFilm,\n  fetchTrending,\n  fetchGenres,\n  fetchIMDbId,\n} from './API.js';\n\nconst gallery = document.querySelector('.gallery');\nconst form = document.querySelector('.form');\n\nform.addEventListener('input', inputFilterFilm);\nform.addEventListener('submit', onSubmitFilterFilm);\n\nlet page = 1;\nlet searchNameFilm = '';\n\nlet currentArrFilmLS = [];\nlet currentFilmReadLS = [];\n\n// Получение с бэкэнда массива жанров фильмов и сохраниние его в LocalStorage для дальнейшей работы\n\nfetchGenres().then(responce => {\n  localStorage.setItem('Genres', JSON.stringify(responce.genres));\n});\n\n// Чтение перед загрузкой стартовой страницы сохраненного массива жанров фильмов\n\nconst gen = localStorage.getItem('Genres');\n\nfunction inputFilterFilm(event) {\n  searchNameFilm = event.target.value;\n}\n\nfunction onSubmitFilterFilm(event) {\n  event.preventDefault();\n  clearGallery();\n  fetchSearchFilm(searchNameFilm, page).then(responce => {\n    renderFilmoteka(responce);\n  });\n}\n\nfetchTrending(page).then(responce => {\n  renderFilmoteka(responce);\n});\n\nfunction renderFilmoteka(films) {\n  const arrayFilms = films.results;\n  const totalFilms = films.total_results;\n  const totalPage = films.total_pages;\n  makeGallery(arrayFilms);\n}\n\n// Чтение из LocalStorage массива текущей страницы галереи\nfunction onReadCurrentArrayFilmLS() {\n  let filmReadLocalStorage = localStorage.getItem('currentArrayFilm');\n  currentFilmReadLS = JSON.parse(filmReadLocalStorage);\n\n  console.log(currentFilmReadLS);\n}\n\nonReadCurrentArrayFilmLS();\nconsole.log(currentFilmReadLS);\n\n// Получение ID  фильма с объекта в LS\nfunction onReadIdFromLS(numberFilmPage) {\n  return currentFilmReadLS[numberFilmPage].id;\n}\n\n// Получение IMDb_id с бэкэнда через ID фильма с картотеки с сохранением IMDb_id в LS\nfetchIMDbId(onReadIdFromLS(2)).then(responce => {\n  localStorage.setItem('IMDb_id', JSON.stringify(responce.imdb_id));\n});\n\n// console.log(localStorage.getItem());\n\n// Чтение IMDb_id с LS для получения ссылки на сайт IMDb\nlet idIMDb = JSON.parse(localStorage.getItem('IMDb_id'));\nconsole.log(idIMDb);\n\n// Пример открытия ссылки в новой вкладке\n// console.log(window.open(`https://www.imdb.com/title/${idIMDb}`, '_blank'));\n\nfunction makeGallery(arrayCards) {\n  const API_IMAGE = 'https://image.tmdb.org/t/p';\n  currentArrFilmLS = [];\n  const markup = arrayCards\n    .map(card => {\n      // Формирование массива текущей страницы для записи в LocalStorage для последующего использования в модальном окне\n      currentArrFilmLS.push(card);\n      //\n      let genres = '';\n      const genresLocalStorage = localStorage.getItem('Genres');\n      const gen = JSON.parse(genresLocalStorage);\n      if (card.genre_ids.length !== 0) {\n        Object.values(gen).forEach(value => {\n          if (card.genre_ids.includes(value.id)) {\n            genres = genres.concat(value.name, ', ');\n          }\n        });\n      }\n      genres = genres.slice(0, genres.length - 2);\n      return `<div class=\"card\" id=\"${card.id}\">\n      <img class=\"gallery__image\" src=\"${API_IMAGE}/w300${card.poster_path}\" alt=\"Постер не найден\" loading=\"lazy\" />\n    <p class=\"genres\">${genres}</p>\n  </div>`;\n    })\n    .join('');\n  gallery.insertAdjacentHTML('beforeend', markup);\n\n  // Удаление из LocalStorage массива жанров фильмов\n  // localStorage.removeItem('Genres');\n  // Сохранение в LocalStorage массива фильмов текущей страницы\n  localStorage.setItem('currentArrayFilm', JSON.stringify(currentArrFilmLS));\n}\n\n// Очистка галереи\n\nfunction clearGallery() {\n  gallery.innerHTML = '';\n}\n","const galleryLib = document.querySelector('.gallery-lib');\nconst divContaunerText = document.querySelector('.div__text--decoration');\n\n\nfunction renderGalleryLib(movie) {\n  const markupGalleryLib = movie\n    .map(mov => {\n      const { title, genre_ids, release_date, vote_average, id, poster_path } =\n        mov;\n      return `<li class=\"gallery__item\">\n            <a class=\"gallery__card\" href=\"#\" id=\"${id}\">\n               <picture>\n                  <source media=\"(min-width: 1280px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w500${poster_path}    1x,\n                              https://image.tmdb.org/t/p/original${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <source media=\"(min-width: 768px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w342${poster_path}    1x,\n                              https://image.tmdb.org/t/p/w780${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <source media=\"(max-width: 767px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w342${poster_path}    1x,\n                              https://image.tmdb.org/t/p/w780${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <img class=\"gallery__foto\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" width=\"450\"\n                     height=\"294\" alt=\"${title} poster\" loading=\"lazy\" />\n               </picture>\n               <h2 class=\"gallery__subtitle\">${title}</h2>\n               <div class=\"gallery__info\">\n                  <p class=\"gallery__genres\">${genre_ids}</p>\n                  <p class=\"gallery__year\">${release_date}</p>\n                  <p class=\"gallery__vote-average\">${vote_average}</p>\n               </div>\n            </a>\n         </li>`;\n    })\n    .join('');\n  galleryLib.insertAdjacentElement('beforebegin', markupGalleryLib);\n}\n","// const listEl = document.querySelector('.gallery');\n// listEl.addEventListener('click', e => {\n//   let filmId = e.target.closest('.gallery__card').id;\n// });\n\nconst listEl = document.querySelector('.gallery');\nlistEl.addEventListener('click', onRenderModal);\n\ndocument.querySelector('.button-modal__close').addEventListener('click', e => {\n  document.querySelector('.backdrop').classList.add('display__none');\n});\n\nfunction onRenderModal(e) {\n  if (e.target === e.currentTarget) {\n    console.log('nahui');\n    return;\n  }\n\n  let filmId = e.target.closest('.card').id;\n  let electFilm = getFilmById(filmId);\n  let idGenresOfElectFilm = electFilm.genre_ids;\n  let nameGenresOfElectFilm = getGenres(idGenresOfElectFilm);\n  let remakeElectFilm = remareFilmObj(electFilm);\n  console.log(remakeElectFilm);\n  let idIMDb = JSON.parse(localStorage.getItem('IMDb_id'));\n  console.log(idIMDb);\n\n  renderModalWindoq(remakeElectFilm, idIMDb);\n  document.querySelector('.backdrop').classList.remove('display__none');\n\n  // console.log(nameGenresOfElectFilm);\n  // renderModalWindoq(electFilm, nameGenresOfElectFilm);\n}\n\nfunction getGenres(genre_ids) {\n  let genres = '';\n  const genresLocalStorage = localStorage.getItem('Genres');\n  const gen = JSON.parse(genresLocalStorage);\n\n  if (genre_ids.length !== 0) {\n    if (genre_ids.length > 3) {\n      genre_ids = genre_ids.slice(0, 3);\n    }\n\n    Object.values(gen).forEach(value => {\n      if (genre_ids.includes(value.id)) {\n        genres = genres.concat(value.name, ', ');\n      }\n    });\n  }\n  return genres;\n}\n\nfunction onReadCurrentArrayFilmLS() {\n  let filmReadLocalStorage = localStorage.getItem('currentArrayFilm');\n  currentFilmReadLS = JSON.parse(filmReadLocalStorage);\n  return currentFilmReadLS;\n}\n\nfunction getFilmById(id) {\n  let arrayOfFilms = onReadCurrentArrayFilmLS();\n  let electFilm = arrayOfFilms.find(el => el.id === Number(id));\n  return electFilm;\n}\n\nfunction renderModalWindoq(filmEl, idInIMDB) {\n  const {\n    id,\n    title,\n    original_title,\n    poster_path,\n    popularity,\n    vote_average,\n    vote_count,\n    overview,\n    genresName,\n  } = filmEl;\n  let modalRenderCod = `    \n        <div class=\"button-modal--flex\">\n            <img class=\"button-modal__img\" src=\"https://image.tmdb.org/t/p/original${poster_path}\" alt=\"${title} poster\">\n            <div class=\"modal__about--movie\">\n                <h2 class=\"modal__about--title\">${title}</h2>\n                <p class=\"modal__about--title--movie\">Vote / Votes <span class=\"modal__about--rating\">${vote_average}</span><span\n                        class=\"modal__about--title--movie-slech\">/</span> <span\n                        class=\"modal__about--text--bleck\">${vote_count}</span>\n                </p>\n                <a target=\"_blank\" class=\"imdb-btn\" href=\"https://www.imdb.com/title/${idInIMDB}\">IMDb</a>\n\n                <p class=\"modal__about--title--movie\">Popularity<span\n                        class=\"modal__about--text--popularity\">${popularity}</span>\n                <p class=\"modal__about--title--movie\">Original Title<span class=\"modal__about--text--original--title\">A\n                        ${original_title}</span>\n                <p class=\"modal__about--title--movie\">Genre<span class=\"modal__about--text--genre\">${genresName}</span>\n                </p>\n                </p>\n                <p class=\"about__movie--text\">About</p>\n                <p class=\"about__movie--text--content\">${overview}</p>\n                <ul class=\"list__btn--add\">\n                    <li><button class=\"add__watched\" data-id=\"${id}\" type=\"button\">add to Watched</button></li>\n                    <li><button class=\"aadd_queue\" data-id=\"${id}\" type=\"button\">add to queue</button></li>\n                </ul>\n\n            </div>\n        </div>\n    </div>`;\n\n  document\n    .querySelector('.modal')\n    .insertAdjacentHTML('beforeend', modalRenderCod);\n}\n\nfunction remareFilmObj(film) {\n  console.log('film', film);\n  film.genresName = getGenres(film.genre_ids);\n  console.log('film.genresName', film.genresName);\n  return film;\n}\n\n// remareFilsmObj(onReadCurrentArrayFilmLS());\n\nfunction remareFilsmObj(films) {\n  console.log('films', films);\n  let remake = films.map(el => remareFilmObj(el));\n  console.log('remake', remake);\n}\n"],"names":["$bdfcdc80b4c38739$export$1cd6975ec0fe7e3d","document","querySelector","window","addEventListener","setTimeout","classList","add","$8aad853c076397e7$var$refs","formEl","inputEl","buttonEl","error","e","preventDefault","formValue","currentTarget","elements","value","style","display","reset","eror","console","log","$1cafa503bc57b7a0$var$refs","watched","queue","remove","eror1","async","$9641fdd394b90517$export$2fb6161e4448238a","query","page","URL","fetch","json","$35780a5662e3ee94$var$gallery","$35780a5662e3ee94$var$form","event","$35780a5662e3ee94$var$searchNameFilm","target","innerHTML","then","responce","$35780a5662e3ee94$var$renderFilmoteka","$35780a5662e3ee94$var$currentArrFilmLS","$35780a5662e3ee94$var$currentFilmReadLS","localStorage","setItem","JSON","stringify","genres","getItem","films","arrayFilms","results","total_results","total_pages","arrayCards","API_IMAGE","markup","map","card","push","genresLocalStorage","gen1","parse","genre_ids","length","Object","values","forEach","includes","id","concat","name","slice","poster_path","join","insertAdjacentHTML","$35780a5662e3ee94$var$makeGallery","numberFilmPage","filmReadLocalStorage","$35780a5662e3ee94$var$onReadCurrentArrayFilmLS","filmoId","imdb_id","$35780a5662e3ee94$var$idIMDb","$21b135ebd1d29f71$var$getGenres","gen","$21b135ebd1d29f71$var$remareFilmObj","film","genresName","electFilm","closest","currentFilmReadLS","$21b135ebd1d29f71$var$onReadCurrentArrayFilmLS","find","el","Number","remakeElectFilm","idIMDb","filmEl","idInIMDB","title","original_title","popularity","vote_average","vote_count","overview","modalRenderCod","$21b135ebd1d29f71$var$renderModalWindoq"],"version":3,"file":"library.a0139f61.js.map"}