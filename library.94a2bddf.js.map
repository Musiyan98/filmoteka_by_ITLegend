{"mappings":"AACO,MAAMA,EAASC,SAASC,cAAc,SAE7CC,OAAOC,iBAAiB,oBAIjB,WACLC,YAAW,KACTL,EAAOM,UAAUC,IAAI,UACpB,QCVL,MAAMC,EAAO,CACTC,OAAQR,SAASC,cAAc,SAC/BQ,QAAST,SAASC,cAAc,gBAChCS,SAAUV,SAASC,cAAc,WACjCU,MAAOX,SAASC,cAAc,oBAGlCM,EAAKC,OAAOL,iBAAiB,UAE7B,SAAmBS,GACfA,EAAEC,iBACF,MAAMC,EAAYF,EAAEG,cAAcC,SAAS,GAAGC,MAE9CV,EAAKI,MAAMO,MAAMC,QAAU,OACd,IAAbL,IACAP,EAAKI,MAAMO,MAAMC,QAAU,SAE3BP,EAAEG,cAAcK,WCHpBC,eAAeC,EAAgBC,EAAOC,GACpC,IACE,MAAMC,EAAM,4CAKZ,aAHuBC,MACrB,GAAGD,mDAA+BD,WAAcD,MAElCI,OAChB,MAAOhB,GAE+BiB,QAA9BjB,MAAMA,ICtBlB,MAAMkB,EAAU7B,SAASC,cAAc,YACjC6B,EAAO9B,SAASC,cAAc,SAEpC6B,EAAK3B,iBAAiB,SAoBtB,SAAyB4B,GACvBC,EAAiBD,EAAME,OAAOhB,SApBhCa,EAAK3B,iBAAiB,UAuBtB,SAA4B4B,GAC1BA,EAAMlB,iBAiENgB,EAAQK,UAAY,GA/DpBZ,EAAgBU,EAxBP,GAwB6BG,MAAKC,IACzCC,EAAgBD,SAzBpB,IACIJ,EAAiB,GAEjBM,EAAmB,GACnBC,EAAoB,IDgBxBlB,iBACE,IACE,MAAMI,EAAM,gDAGZ,aADuBC,MAAM,GAAGD,+CAChBE,OAChB,MAAOhB,GAE+BiB,QAA9BjB,MAAMA,KCpBqD,GAAzDwB,MAAKC,IACjBI,aAAaC,QAAQ,SAAUC,KAAKC,UAAUP,EAASQ,YAM7CJ,aAAaK,QAAQ,UAkBjC,SAASR,EAAgBS,GACvB,MAAMC,EAAaD,EAAME,QACNF,EAAMG,cACPH,EAAMI,aAe1B,SAAqBC,GACnB,MAAMC,EAAY,6BAClBd,EAAmB,GACnB,MAAMe,EAASF,EACZG,KAAIC,IAEmFjB,EAArEkB,KAAKD,GAEtB,IAAIX,EAAS,GACb,MAAMa,EAAqBjB,aAAaK,QAAQ,UAC1Ca,EAAMhB,KAAKiB,MAAMF,GASvB,OAR8B,IAA1BF,EAAKK,UAAUC,QACjBC,OAAOC,OAAOL,GAAKM,SAAQ/C,IACrBsC,EAAKK,UAAUK,SAAShD,EAAMiD,MAChCtB,EAASA,EAAOuB,OAAOlD,EAAMmD,KAAM,UAIzCxB,EAASA,EAAOyB,MAAM,EAAGzB,EAAOiB,OAAS,GAClC,8DAC4BT,SAAiBG,EAAKe,gFACvC1B,qBAGnB2B,KAAK,IACR1C,EAAQ2C,mBAAmB,YAAanB,GAGVb,aAAjBiC,WAAW,UAEgBjC,aAA3BC,QAAQ,mBAAoBC,KAAKC,UAAUL,IA5CxDoC,CAAY3B,ID3Cd1B,eAA6BG,GAC3B,IACE,MAAMC,EAAM,mDAGZ,aADuBC,MAAM,GAAGD,mDAA+BD,MAC/CG,OAChB,MAAOhB,GAE+BiB,QAA9BjB,MAAMA,KC2BlB,CA7BW,GA6BSwB,MAAKC,IACvBC,EAAgBD,MAWmB,WACnC,IAAIuC,EAAuBnC,aAAaK,QAAQ,oBAChDN,EAAoBG,KAAKiB,MAAMgB,GAE/B/C,QAAQgD,IAAIrC,GAIdsC","sources":["src/js/loader.js","src/js/header.js","src/js/API.js","src/js/renderPage.js"],"sourcesContent":["// REF FOR LOADER BACKDROP\nexport const maskEl = document.querySelector('.mask');\n\nwindow.addEventListener('DOMContentLoaded', onWindowLoad);\n\n// FUNCTION FOR LOADER WHEN APP STARTING\n\nexport function onWindowLoad() {\n  setTimeout(() => {\n    maskEl.classList.add('hide');\n  }, 600);\n}\n\n// LOADER SHOW FUNCTION\n\nexport function loaderShow() {\n  maskEl.classList.remove('hide');\n}\n\n// LOADER HIDE FUNCTION\n\nexport function loaderHide() {\n  setTimeout(() => {\n    maskEl.classList.add('hide');\n  }, 600);\n}\n","const refs = {\n    formEl: document.querySelector('.form'),\n    inputEl: document.querySelector('.input__form'),\n    buttonEl: document.querySelector('.submit'),\n    error: document.querySelector('.error__message')\n}\n\nrefs.formEl.addEventListener('submit', getValue);\n\nfunction getValue (e){\n    e.preventDefault();\n    const formValue = e.currentTarget.elements[0].value\n    // console.log(formValue)\n    refs.error.style.display = 'none';\nif (formValue == ''){\n    refs.error.style.display = 'block';\n}\n    e.currentTarget.reset();\n}","const API_KEY = '1c5c067e324c39f9223ad13ef9891a0a';\n\nasync function fetchTrending(page) {\n  try {\n    const URL = 'https://api.themoviedb.org/3/trending/movie/week';\n\n    const response = await fetch(`${URL}?api_key=${API_KEY}&page=${page}`);\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nasync function fetchSearchFilm(query, page) {\n  try {\n    const URL = 'https://api.themoviedb.org/3/search/movie';\n\n    const response = await fetch(\n      `${URL}?api_key=${API_KEY}&page=${page}&query=${query}`\n    );\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nasync function fetchGenres() {\n  try {\n    const URL = 'https://api.themoviedb.org/3/genre/movie/list';\n\n    const response = await fetch(`${URL}?api_key=${API_KEY}`);\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nexport { fetchTrending, fetchSearchFilm, fetchGenres };\n\n// Комментарии по поиску\n//        Галерея:\n// Название фильма: title\n// Жанры: genre_ids  реализованы через localStorage\n// Год выхода фильма: release_date   нужно slice обрезать и оставить первые 4 знака (тип строка)\n// Оценка пользователей : vote_average  нужно округлить до 1 знака после запятой\n\n// Модальное окно:\n// дополнительно к Галерее:\n// Количество отзывов vote_count\n// Популярность popularity\n// Оригинальное название original_title\n// Описание overview\n","import { fetchSearchFilm, fetchTrending, fetchGenres } from './API.js';\n\nconst gallery = document.querySelector('.gallery');\nconst form = document.querySelector('.form');\n\nform.addEventListener('input', inputFilterFilm);\nform.addEventListener('submit', onSubmitFilterFilm);\n\nlet page = 1;\nlet searchNameFilm = '';\n\nlet currentArrFilmLS = [];\nlet currentFilmReadLS = [];\n\n// Получение с бэкэнда массива жанров фильмов и сохраниние его в LocalStorage для дальнейшей работы\n\nfetchGenres().then(responce => {\n  localStorage.setItem('Genres', JSON.stringify(responce.genres));\n});\n\n\n// Чтение перед загрузкой стартовой страницы сохраненного массива жанров фильмов\n\nconst gen = localStorage.getItem('Genres');\n\nfunction inputFilterFilm(event) {\n  searchNameFilm = event.target.value;\n}\n\nfunction onSubmitFilterFilm(event) {\n  event.preventDefault();\n  clearGallery();\n  fetchSearchFilm(searchNameFilm, page).then(responce => {\n    renderFilmoteka(responce);\n  });\n}\n\nfetchTrending(page).then(responce => {\n  renderFilmoteka(responce);\n});\n\nfunction renderFilmoteka(films) {\n  const arrayFilms = films.results;\n  const totalFilms = films.total_results;\n  const totalPage = films.total_pages;\n  makeGallery(arrayFilms);\n}\n\n// Чтение из LocalStorage массива текущей страницы галереи\nfunction onReadCurrentArrayFilmLS() {\n  let filmReadLocalStorage = localStorage.getItem('currentArrayFilm');\n  currentFilmReadLS = JSON.parse(filmReadLocalStorage);\n\n  console.log(currentFilmReadLS);\n\n}\n\nonReadCurrentArrayFilmLS();\n\nfunction makeGallery(arrayCards) {\n  const API_IMAGE = 'https://image.tmdb.org/t/p';\n  currentArrFilmLS = [];\n  const markup = arrayCards\n    .map(card => {\n      // Формирование массива текущей страницы для записи в LocalStorage для последующего использования в модальном окне\n      currentArrFilmLS.push(card);\n      //\n      let genres = '';\n      const genresLocalStorage = localStorage.getItem('Genres');\n      const gen = JSON.parse(genresLocalStorage);\n      if (card.genre_ids.length !== 0) {\n        Object.values(gen).forEach(value => {\n          if (card.genre_ids.includes(value.id)) {\n            genres = genres.concat(value.name, ', ');\n          }\n        });\n      }\n      genres = genres.slice(0, genres.length - 2);\n      return `<div class=\"card\">\n      <img class=\"gallery__image\" src=\"${API_IMAGE}/w300${card.poster_path}\" alt=\"Постер не найден\" loading=\"lazy\" />\n    <p class=\"genres\">${genres}</p>\n  </div>`;\n    })\n    .join('');\n  gallery.insertAdjacentHTML('beforeend', markup);\n\n  // Удаление из LocalStorage массива жанров фильмов\n  localStorage.removeItem('Genres');\n  // Сохранение в LocalStorage массива фильмов текущей страницы\n  localStorage.setItem('currentArrayFilm', JSON.stringify(currentArrFilmLS));\n}\n\n// Очистка галереи\n\nfunction clearGallery() {\n  gallery.innerHTML = '';\n}\n"],"names":["$bdfcdc80b4c38739$export$1cd6975ec0fe7e3d","document","querySelector","window","addEventListener","setTimeout","classList","add","$8aad853c076397e7$var$refs","formEl","inputEl","buttonEl","error","e","preventDefault","formValue","currentTarget","elements","value","style","display","reset","async","$9641fdd394b90517$export$2fb6161e4448238a","query","page","URL","fetch","json","console","$35780a5662e3ee94$var$gallery","$35780a5662e3ee94$var$form","event","$35780a5662e3ee94$var$searchNameFilm","target","innerHTML","then","responce","$35780a5662e3ee94$var$renderFilmoteka","$35780a5662e3ee94$var$currentArrFilmLS","$35780a5662e3ee94$var$currentFilmReadLS","localStorage","setItem","JSON","stringify","genres","getItem","films","arrayFilms","results","total_results","total_pages","arrayCards","API_IMAGE","markup","map","card","push","genresLocalStorage","gen1","parse","genre_ids","length","Object","values","forEach","includes","id","concat","name","slice","poster_path","join","insertAdjacentHTML","removeItem","$35780a5662e3ee94$var$makeGallery","filmReadLocalStorage","log","$35780a5662e3ee94$var$onReadCurrentArrayFilmLS"],"version":3,"file":"library.94a2bddf.js.map"}