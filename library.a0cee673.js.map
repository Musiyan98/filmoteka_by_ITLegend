{"mappings":"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","sources":["src/js/loader.js","src/js/header.js","src/js/library.js","src/js/API.js","src/js/renderMainGallery.js","src/js/renderPage.js","src/js/gallery-lib.js","src/js/modalRender.js","src/js/headerButton.js"],"sourcesContent":["// REF FOR LOADER BACKDROP\nexport const maskEl = document.querySelector('.mask');\n\nwindow.addEventListener('DOMContentLoaded', onWindowLoad);\n\n// FUNCTION FOR LOADER WHEN APP STARTING\n\nexport function onWindowLoad() {\n  setTimeout(() => {\n    maskEl.classList.add('hide');\n  }, 600);\n}\n\n// LOADER SHOW FUNCTION\n\nexport function loaderShow() {\n  maskEl.classList.remove('hide');\n}\n\n// LOADER HIDE FUNCTION\n\nexport function loaderHide() {\n  setTimeout(() => {\n    maskEl.classList.add('hide');\n  }, 600);\n}\n","const refs = {\n    formEl: document.querySelector('.form'),\n    inputEl: document.querySelector('.input__form'),\n    buttonEl: document.querySelector('.submit'),\n    error: document.querySelector('.error__message'),\n    enLang: document.querySelector('.en'),\n    ukLang: document.querySelector('.uk'),\n}\n\nconsole.log(refs.enLang)\n\nrefs.enLang.addEventListener('click', ()=>{\n    refs.enLang.classList.add('activeLang');\n    refs.ukLang.classList.remove('activeLang');\n});\n\nrefs.ukLang.addEventListener('click', ()=>{\n    refs.ukLang.classList.add('activeLang');\n    refs.enLang.classList.remove('activeLang');\n});\n\ntry {\n    refs.formEl.addEventListener('submit', getValue);\n} catch (eror) {\n    console.log(eror);\n}\n\nfunction getValue (e){\n    e.preventDefault();\n    const formValue = e.currentTarget.elements[0].value\n    refs.error.style.display = 'none';\nif (formValue == ''){\n    refs.error.style.display = 'block';\n}\n    e.currentTarget.reset();\n}","const refs = {\n    watched: document.querySelector('.watched'),\n    queue: document.querySelector('.queue'),\n    enLang: document.querySelector('.en'),\n    ukLang: document.querySelector('.uk')\n}\n\nrefs.enLang.addEventListener('click', ()=>{\n  refs.enLang.classList.add('activeLang');\n  refs.ukLang.classList.remove('activeLang');\n});\n\nrefs.ukLang.addEventListener('click', ()=>{\n  refs.ukLang.classList.add('activeLang');\n  refs.enLang.classList.remove('activeLang');\n});\n\n\ntry {\n    refs.watched.addEventListener('click', () => {\n      refs.watched.classList.add('active');\n      refs.queue.classList.remove('active');\n    });\n  } catch (eror) {\n    console.log(eror);\n  }\n  \n  try {\n    refs.queue.addEventListener('click', () => {\n      refs.queue.classList.add('active');\n      refs.watched.classList.remove('active');\n    });\n  } catch (eror) {\n    console.log(eror);\n  }\n","const API_KEY = '1c5c067e324c39f9223ad13ef9891a0a';\n\nasync function fetchTrending(page) {\n  try {\n    const URL = 'https://api.themoviedb.org/3/trending/movie/week';\n\n    const response = await fetch(`${URL}?api_key=${API_KEY}&page=${page}`);\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nasync function fetchSearchFilm(query, page) {\n  try {\n    const URL = 'https://api.themoviedb.org/3/search/movie';\n\n    const response = await fetch(\n      `${URL}?api_key=${API_KEY}&page=${page}&query=${query}`\n    );\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nasync function fetchGenres() {\n  try {\n    const URL = 'https://api.themoviedb.org/3/genre/movie/list';\n\n    const response = await fetch(`${URL}?api_key=${API_KEY}`);\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nasync function fetchIMDbId(filmoId) {\n  try {\n    console.log(filmoId);\n    const URL = 'https://api.themoviedb.org/3/movie/';\n\n    const response = await fetch(`${URL}${filmoId}?api_key=${API_KEY}`);\n    return response.json();\n  } catch (error) {\n    // обработка ошибки получения данных с бэкэнда\n    console.error(error);\n  }\n}\n\nexport { fetchTrending, fetchSearchFilm, fetchGenres, fetchIMDbId };\n\n// Комментарии по поиску\n//        Галерея:\n// Название фильма: title\n// Жанры: genre_ids  реализованы через localStorage\n// Год выхода фильма: release_date   нужно slice обрезать и оставить первые 4 знака (тип строка)\n// Оценка пользователей : vote_average  нужно округлить до 1 знака после запятой\n\n// Модальное окно:\n// дополнительно к Галерее:\n// Количество отзывов vote_count\n// Популярность popularity\n// Оригинальное название original_title\n// Описание overview\n","function clearGallery() {\n  gallery.innerHTML = '';\n}\n\nconst galleryLib = document.querySelector('.gallery');\n\nconst getCurrentArrayFilmLS = localStorage.getItem('currentArrayFilm');\nconst currentArrayFilms = JSON.parse(getCurrentArrayFilmLS);\n\nfunction renderGalleryLib(movie) {\n  const markupGalleryLib = movie\n    .map(mov => {\n      const { title, genresName, release_date, id, poster_path } = mov;\n      return `<li class=\"gallery__item\">\n            <a class=\"gallery__card\" href=\"#\" id=\"${id}\">\n               <picture>\n                  <source media=\"(min-width: 1280px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w500${poster_path}    1x,\n                              https://image.tmdb.org/t/p/original${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <source media=\"(min-width: 768px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w342${poster_path}    1x,\n                              https://image.tmdb.org/t/p/w780${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <source media=\"(max-width: 767px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w342${poster_path}    1x,\n                              https://image.tmdb.org/t/p/w780${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <img class=\"gallery__foto\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" width=\"450\"\n                     height=\"294\" alt=\"${title} poster\" loading=\"lazy\" />\n               </picture>\n               <h2 class=\"gallery__subtitle\">${title}</h2>\n               <div class=\"gallery__info\">\n                  <p class=\"gallery__genres\">${genresName}</p>\n                  <p class=\"gallery__year\">${release_date.slice(0, 4)}</p>\n               </div>\n            </a>\n         </li>`;\n    })\n    .join('');\n  galleryLib.insertAdjacentHTML('beforeend', markupGalleryLib);\n}\n// console.log(currentArrayFilms);\n// renderGalleryLib(currentArrayFilms);\n\nexport default renderGalleryLib;\n","import {\n  fetchSearchFilm,\n  fetchTrending,\n  fetchGenres,\n  fetchIMDbId,\n} from './API.js';\n\nimport renderGalleryLib from './renderMainGallery';\n\nconst gallery = document.querySelector('.gallery');\nconst form = document.querySelector('.form');\nconst error = document.querySelector('.error__message');\n\nif (form) {\n  form.addEventListener('input', inputFilterFilm);\n  form.addEventListener('submit', onSubmitFilterFilm);\n}\n\nlet page = 1;\nlet searchNameFilm = '';\n\nlet currentArrFilmLS = [];\nlet currentFilmReadLS = [];\n\n// Получение с бэкэнда массива жанров фильмов и сохраниние его в LocalStorage для дальнейшей работы\n\nfetchGenres().then(responce => {\n  localStorage.setItem('Genres', JSON.stringify(responce.genres));\n});\n\n// Чтение перед загрузкой стартовой страницы сохраненного массива жанров фильмов\n\nconst gen = localStorage.getItem('Genres');\nconst getCurrentArrayFilmLS = localStorage.getItem('currentArrayFilm');\nconst currentArrayFilms = JSON.parse(getCurrentArrayFilmLS);\n\nfunction inputFilterFilm(event) {\n  searchNameFilm = event.target.value;\n}\n\nfunction onSubmitFilterFilm(event) {\n  event.preventDefault();\n  clearGallery();\n  fetchSearchFilm(searchNameFilm, page).then(responce => {\n    renderFilmoteka(responce);\n  });\n}\n\nfetchTrending(page)\n  .then(responce => {\n    renderFilmoteka(responce);\n  })\n  .catch(error => {\n    console.log(error);\n  });\n\nfunction renderFilmoteka(films) {\n  const arrayFilms = films.results;\n  const totalFilms = films.total_results;\n  const totalPage = films.total_pages;\n  let updateCurrentArrFilmsLS = getCurrentArrFilmsLS(arrayFilms);\n  renderGalleryLib(updateCurrentArrFilmsLS);\n}\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\nfunction getCurrentArrFilmsLS(arrayFilms) {\n  currentArrFilmLS = [];\n  const markup = arrayFilms.map(card => {\n    // Формирование массива текущей страницы для записи в LocalStorage для последующего использования в модальном окне\n    currentArrFilmLS.push(card);\n  });\n  // console.log('currentArrFilmLS', currentArrFilmLS);\n  if (currentArrFilmLS.length == 0) {\n    error.style.display = 'block';\n    return JSON.parse(localStorage.getItem('currentArrayFilm'));\n  }\n  let arrayFilmsWithGenderName = remareFilsmObj(currentArrFilmLS);\n  localStorage.setItem(\n    'currentArrayFilm',\n    JSON.stringify(arrayFilmsWithGenderName)\n  );\n  // console.log('LS', arrayFilmsWithGenderName);\n  return arrayFilmsWithGenderName;\n}\n\nfunction remareFilsmObj(films) {\n  return films.map(el => remareFilmObj(el));\n}\n\nfunction remareFilmObj(film) {\n  // // console.log('film', film);\n  film.genresName = getGenres(film.genre_ids);\n  // console.log('film.genresName', film.genresName);\n  return film;\n}\n\nfunction getGenres(genre_ids) {\n  let genres = '';\n  const genresLocalStorage = localStorage.getItem('Genres');\n  const gen = JSON.parse(genresLocalStorage);\n\n  if (genre_ids.length !== 0) {\n    if (genre_ids.length > 3) {\n      genre_ids = genre_ids.slice(0, 3);\n    }\n\n    Object.values(gen).forEach(value => {\n      if (genre_ids.includes(value.id)) {\n        genres = genres.concat(value.name, ', ');\n      }\n    });\n  }\n  genres = genres.slice(0, genres.length - 2);\n  return genres;\n}\n\n// \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\nfunction clearGallery() {\n  gallery.innerHTML = '';\n}\n\n// Чтение из LocalStorage массива текущей страницы галереи\n// function onReadCurrentArrayFilmLS() {\n//   let filmReadLocalStorage = localStorage.getItem('currentArrayFilm');\n//   currentFilmReadLS = JSON.parse(filmReadLocalStorage);\n\n//   // // console.log(currentFilmReadLS);\n// }\n\n// onReadCurrentArrayFilmLS();\n// // console.log(currentFilmReadLS);\n\n// Получение ID  фильма с объекта в LS\n// function onReadIdFromLS(numberFilmPage) {\n//   return currentFilmReadLS[numberFilmPage].id;\n// }\n\n// Получение IMDb_id с бэкэнда через ID фильма с картотеки с сохранением IMDb_id в LS\n\n// // console.log(localStorage.getItem());\n\n// Чтение IMDb_id с LS для получения ссылки на сайт IMDb\n// let idIMDb = JSON.parse(localStorage.getItem('IMDb_id'));\n// // console.log(idIMDb);\n\n// Пример открытия ссылки в новой вкладке\n// // console.log(window.open(`https://www.imdb.com/title/${idIMDb}`, '_blank'));\n\n// function makeGallery(arrayCards) {\n//   const API_IMAGE = 'https://image.tmdb.org/t/p';\n//   currentArrFilmLS = [];\n//   const markup = arrayCards\n//     .map(card => {\n//       // Формирование массива текущей страницы для записи в LocalStorage для последующего использования в модальном окне\n//       currentArrFilmLS.push(card);\n//       //\n//       let genres = '';\n//       const genresLocalStorage = localStorage.getItem('Genres');\n//       const gen = JSON.parse(genresLocalStorage);\n//       if (card.genre_ids.length !== 0) {\n//         Object.values(gen).forEach(value => {\n//           if (card.genre_ids.includes(value.id)) {\n//             genres = genres.concat(value.name, ', ');\n//           }\n//         });\n//       }\n//       genres = genres.slice(0, genres.length - 2);\n//       return `<div class=\"card\" id=\"${card.id}\">\n//       <img class=\"gallery__image\" src=\"${API_IMAGE}/w300${card.poster_path}\" alt=\"Постер не найден\" loading=\"lazy\" />\n//     <p class=\"genres\">${genres}</p>\n//   </div>`;\n//     })\n//     .join('');\n//   gallery.insertAdjacentHTML('beforeend', markup);\n\n//   // Удаление из LocalStorage массива жанров фильмов\n//   // localStorage.removeItem('Genres');\n//   // Сохранение в LocalStorage массива фильмов текущей страницы\n// }\n\n// Очистка галереи\n","const galleryLib = document.querySelector('.gallery-lib');\nconst divContaunerText = document.querySelector('.div__text--decoration');\n\n\nfunction renderGalleryLib(movie) {\n  const markupGalleryLib = movie\n    .map(mov => {\n      const { title, genre_ids, release_date, vote_average, id, poster_path } =\n        mov;\n      return `<li class=\"gallery__item\">\n            <a class=\"gallery__card\" href=\"#\" id=\"${id}\">\n               <picture>\n                  <source media=\"(min-width: 1280px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w500${poster_path}    1x,\n                              https://image.tmdb.org/t/p/original${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <source media=\"(min-width: 768px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w342${poster_path}    1x,\n                              https://image.tmdb.org/t/p/w780${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <source media=\"(max-width: 767px)\" srcset=\"\n                              https://image.tmdb.org/t/p/w342${poster_path}    1x,\n                              https://image.tmdb.org/t/p/w780${poster_path} 2x,\n                              https://image.tmdb.org/t/p/original${poster_path} 3x\n                           \" type=\"image/jpg\" />\n                  <img class=\"gallery__foto\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" width=\"450\"\n                     height=\"294\" alt=\"${title} poster\" loading=\"lazy\" />\n               </picture>\n               <h2 class=\"gallery__subtitle\">${title}</h2>\n               <div class=\"gallery__info\">\n                  <p class=\"gallery__genres\">${genre_ids}</p>\n                  <p class=\"gallery__year\">${release_date}</p>\n                  <p class=\"gallery__vote-average\">${vote_average}</p>\n               </div>\n            </a>\n         </li>`;\n    })\n    .join('');\n  galleryLib.insertAdjacentElement('beforebegin', markupGalleryLib);\n}\n","import { fetchIMDbId } from './API';\n\nconst listEl = document.querySelector('.gallery');\nconst modalWindowEl = document.querySelector('.modal');\nconst modalCloseBtnEl = document.querySelector('.button-modal__close');\n//Alex\nconst LOCALSTORAGE_WATCHED = 'films-to-watched';\nconst LOCALSTORAGE_QUEUE = 'films-to-queue';\n\nif (listEl) {\n  listEl.addEventListener('click', onRenderModal);\n  modalCloseBtnEl.addEventListener('click', onCloseModal);\n}\n\nfunction onRenderModal(e) {\n  if (e.target === e.currentTarget) {\n    return;\n  }\n  e.preventDefault();\n\n  let filmId = e.target.closest('.gallery__card').id;\n  let electFilm = getFilmById(filmId);\n  renderModalWindoq(electFilm);\n  document.querySelector('.backdrop').classList.remove('display__none');\n\n  const addWatched = document.querySelector('.add__watched');\n  const addQueue = document.querySelector('.add_queue');\n  const imdbBtnEl = document.querySelector('.imdb-btn');\n\n  imdbBtnEl.addEventListener('click', onGoIMDbPage);\n  //Alex\n  addWatched.addEventListener(\n    'click',\n    onBtnAddClick.bind(this, electFilm, LOCALSTORAGE_WATCHED)\n  );\n  addQueue.addEventListener(\n    'click',\n    onBtnAddClick.bind(this, electFilm, LOCALSTORAGE_QUEUE)\n  );\n}\n\n//Alex\nasync function onBtnAddClick(electFilm, currentLocalStorage, evt) {\n  evt.preventDefault();\n\n  let arrayAdd = localStorage.getItem(currentLocalStorage);\n  try {\n    arrayAdd = JSON.parse(arrayAdd);\n    if (!Array.isArray(arrayAdd)) {\n      arrayAdd = [];\n    }\n  } catch {\n    arrayAdd = [];\n  }\n\n  const textMessage =\n    currentLocalStorage === LOCALSTORAGE_WATCHED\n      ? 'to the watched'\n      : 'to the queue';\n\n  for (valueFilm of arrayAdd) {\n    if (valueFilm.id === electFilm.id) {\n      window.alert(`This film has already been added ${textMessage}!`);\n      return;\n    }\n  }\n\n  arrayAdd.push(electFilm);\n  window.alert(`New film ${electFilm.title} added ${textMessage}!`);\n  localStorage.setItem(currentLocalStorage, JSON.stringify(arrayAdd));\n\n  console.dir(arrayAdd);\n}\n\nasync function onGoIMDbPage(e) {\n  let filmId = e.target.dataset.id;\n  console.log(e.target.dataset.id);\n  let idIMDb = await getIMDbId(filmId);\n  let getHref = `https://www.imdb.com/title/${idIMDb}`;\n  console.log(window.open(getHref));\n}\n\nfunction onCloseModal(e) {\n  const addWatched = document.querySelector('.add__watched');\n  const addQueue = document.querySelector('.add_queue');\n  const imdbBtnEl = document.querySelector('.imdb-btn');\n\n  imdbBtnEl.removeEventListener('click', onGoIMDbPage);\n  //Alex\n  addWatched.removeEventListener('click', onBtnAddClick);\n  addQueue.removeEventListener('click', onBtnAddClick);\n\n  document.querySelector('.backdrop').classList.add('display__none');\n  document.querySelector('.button-modal--flex').remove();\n  localStorage.removeItem('IMDb_id');\n}\n\nasync function getIMDbId(filmId) {\n  await fetchIMDbId(filmId).then(responce => {\n    localStorage.setItem('IMDb_id', JSON.stringify(responce.imdb_id));\n  });\n\n  let idIMDb = await JSON.parse(localStorage.getItem('IMDb_id'));\n  return idIMDb;\n}\n\nfunction onReadCurrentArrayFilmLS() {\n  let filmReadLocalStorage = localStorage.getItem('currentArrayFilm');\n  let currentFilmReadLS = JSON.parse(filmReadLocalStorage);\n  return currentFilmReadLS;\n}\n\nfunction getFilmById(id) {\n  let arrayOfFilms = onReadCurrentArrayFilmLS();\n  let electFilm = arrayOfFilms.find(el => el.id === Number(id));\n  return electFilm;\n}\n\nfunction renderModalWindoq(filmEl, idInIMDB) {\n  const {\n    id,\n    title,\n    original_title,\n    poster_path,\n    popularity,\n    vote_average,\n    vote_count,\n    overview,\n    genresName,\n  } = filmEl;\n  // document.querySelector('.modal').lastChild.remove();\n  let modalRenderCod = `    \n        <div class=\"button-modal--flex\">\n            <img class=\"button-modal__img\" src=\"https://image.tmdb.org/t/p/original${poster_path}\" alt=\"${title} poster\">\n            <div class=\"modal__about--movie\">\n                <h2 class=\"modal__about--title\">${title}</h2>\n                <p class=\"modal__about--title--movie\">Vote / Votes <span class=\"modal__about--rating\">${vote_average}</span><span\n\n                        class=\"modal__about--title--movie-slech\">/</span> <span\n                        class=\"modal__about--text--bleck\">${vote_count}</span>\n                        </p>\n                        <button class=\"imdb-btn\" data-id=\"${id}\" type=\"button\">IMDb</button>\n                <p class=\"modal__about--title--movie\">Popularity<span\n                        class=\"modal__about--text--popularity\">${popularity}</span>\n                <p class=\"modal__about--title--movie\">Original Title<span class=\"modal__about--text--original--title\">A\n                        ${original_title}</span>\n                <p class=\"modal__about--title--movie\">Genre<span class=\"modal__about--text--genre\">${genresName}</span>\n                </p>\n                </p>\n                <p class=\"about__movie--text\">About</p>\n                <p class=\"about__movie--text--content\">${overview}</p>\n                <ul class=\"list__btn--add\">\n                    <li><button class=\"add__watched\" data-id=\"${id}\" type=\"button\">add to Watched</button></li>\n                    <li><button class=\"add_queue\" data-id=\"${id}\" type=\"button\">add to queue</button></li>\n                </ul>\n\n            </div>\n        </div>\n    </div>`;\n\n  // <a target=\"_blank\" class=\"imdb-btn\" href=\"https://www.imdb.com/title/${idInIMDB}\">IMDb</a>;\n\n  modalWindowEl.insertAdjacentHTML('beforeend', modalRenderCod);\n}\n","//Alex\nconst btnWatched = document.querySelector('.watched');\nconst btnQueue = document.querySelector('.queue');\nconst LOCALSTORAGE_WATCHED = 'films-to-watched';\nconst LOCALSTORAGE_QUEUE = 'films-to-queue';\n\nif (btnWatched) {\n  btnWatched.addEventListener(\n    'click',\n    onBtnStorage.bind(this, LOCALSTORAGE_WATCHED)\n  );\n}\nif (btnQueue) {\n  btnQueue.addEventListener(\n    'click',\n    onBtnStorage.bind(this, LOCALSTORAGE_QUEUE)\n  );\n}\n\nfunction onBtnStorage(currentLocalStorage, evt) {\n  evt.preventDefault();\n\n  const savedData = localStorage.getItem(currentLocalStorage);\n  try {\n    const parsedData = JSON.parse(savedData);\n    console.log(parsedData);\n  } catch {\n    console.log('Не получилось распарсить JSON');\n    console.log(savedData);\n  }\n}\n"],"names":["$bdfcdc80b4c38739$export$1cd6975ec0fe7e3d","document","querySelector","window","addEventListener","setTimeout","classList","add","$8aad853c076397e7$var$refs","formEl","inputEl","buttonEl","error","enLang","ukLang","console","log","remove","e","preventDefault","formValue","currentTarget","elements","value","style","display","reset","eror","$1cafa503bc57b7a0$var$refs","watched","queue","eror1","async","$9641fdd394b90517$export$2fb6161e4448238a","query","page","URL","fetch","json","$9641fdd394b90517$export$5ce9867893ed6be3","filmoId","$e52841a474c14c2e$var$galleryLib","$e52841a474c14c2e$var$getCurrentArrayFilmLS","localStorage","getItem","JSON","parse","$e52841a474c14c2e$export$2e2bcd8739ae039","movie","markupGalleryLib","map","mov","title","genresName","release_date","id","poster_path","slice","join","insertAdjacentHTML","$35780a5662e3ee94$var$gallery","$35780a5662e3ee94$var$form","$35780a5662e3ee94$var$error","event","$35780a5662e3ee94$var$searchNameFilm","target","innerHTML","then","responce","$35780a5662e3ee94$var$renderFilmoteka","$35780a5662e3ee94$var$currentArrFilmLS","setItem","stringify","genres","$35780a5662e3ee94$var$getCurrentArrayFilmLS","films","arrayFilms","results","total_results","total_pages","updateCurrentArrFilmsLS","card","push","length","arrayFilmsWithGenderName","el","$35780a5662e3ee94$var$remareFilmObj","film","genre_ids","genresLocalStorage","gen1","Object","values","forEach","includes","concat","name","$35780a5662e3ee94$var$getGenres","$35780a5662e3ee94$var$remareFilsmObj","$35780a5662e3ee94$var$getCurrentArrFilmsLS","catch","error1","$21b135ebd1d29f71$var$listEl","$21b135ebd1d29f71$var$modalWindowEl","$21b135ebd1d29f71$var$modalCloseBtnEl","$21b135ebd1d29f71$var$onBtnAddClick","electFilm","currentLocalStorage","evt","arrayAdd","Array","isArray","textMessage","valueFilm","alert","dir","$21b135ebd1d29f71$var$onGoIMDbPage","filmId","dataset","idIMDb","imdb_id","$21b135ebd1d29f71$var$getIMDbId","getHref","open","closest","filmReadLocalStorage","$21b135ebd1d29f71$var$onReadCurrentArrayFilmLS","find","Number","filmEl","idInIMDB","original_title","popularity","vote_average","vote_count","overview","modalRenderCod","$21b135ebd1d29f71$var$renderModalWindoq","addWatched","addQueue","bind","this","removeEventListener","removeItem","$a10b1e5a803dad12$var$btnWatched","$a10b1e5a803dad12$var$btnQueue","$a10b1e5a803dad12$var$onBtnStorage","savedData","parsedData","$a10b1e5a803dad12$exports"],"version":3,"file":"library.a0cee673.js.map"}